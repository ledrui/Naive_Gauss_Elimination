# --------------------------------------------------------
# Iliass Tiendrebeogo            Nov 2014
# program : Naive Gaussian elimination
#
# Desc :  This program take 1 matrix and 1 vector as entry, 
#         perform the naive Gaussian elimination method.      
#         Return the vector result							 
#---------------------------------------------------------
import numpy as np

def naiveGauss(m,b):
	#Forward elimination
	n=len(m) # taking the size of the matrix
	for k in range(0,n-1):
		for i in range (k+1, n):
			xmult = m[i, k]/m[k, k]
			for j in range(0, n):
				#m.append()
				m[i, j] = m[i, j]- (xmult*m[k, j])
			b[i] = b[i]-xmult*b[k]
#Back substitution
	x = np.zeros(shape=[n])
	x[n-1]=b[n-1]/m[n-1, n-1]
	for i in range(n-2, -1, -1):
		sumx = b[i]
		print sumx
		for j in range(i+1, n):
			sumx=sumx-m[i, j]*x[j]
		x[i] = (sumx/m[i, i])
#The output
	return x

#-------------------------------testing----------------------------
m1= 1.0 * np.matrix([[3,1,2],
                     [6,0,5],
                   [-3,-3,2]])
b1=1.0 * np.matrix("3;1;7")
m2= 1.0 *np.matrix([[1,3,2],
                    [0,6,5],
                  [-3,-3,2]])
b2= 1.0 *np.matrix("3;1;7")
#Vandermonde Matrix  size  n = 14
vandermonde = 1.0 *np.matrix([[531441,  177147,  59049,  19683, 6561, 2187, 729, 243, 81, 27, 9, 3,  1],
 [4096, 2048, 1024, 512,  256, 128,  64, 32,  16,  8, 4, 2,   1],
 [531441, 177147, 59049, 19683, 6561, 2187, 729, 243, 81, 27, 9, 3, 1],
 [244140625, 48828125, 9765625, 1953125, 390625, 78125, 15625, 3125, 25, 125, 25, 5, 1],
 [2176782336, 362797056, 60466176, 10077696, 1679616, 279936, 46656, 7776, 1296, 216, 36, 6, 1],
 [13841287201, 1977326743, 282475249, 40353607, 5764801, 823543, 117649, 16807, 2401, 343, 49, 7, 1],
 [4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1],
 [531441, 177147, 59049, 19683, 6561, 2187, 729, 243, 81, 27,  9, 3, 1],
 [244140625, 48828125, 9765625, 1953125, 390625, 78125, 15625, 3125, 625, 125, 25, 5, 1],
 [1,   1,    1,    1,   1,   1,   1,   1,   1,    1,    1,   1,   1],
 [531441, 177147, 59049, 19683, 6561, 2187, 729, 243,  81, 27,  9,  3, 1],
 [4096, 2048, 1024,  512, 256, 128, 64,  32,  16, 8,  4, 2,  1],
 [16777216, 4194304, 1048576, 262144, 65536, 16384, 4096, 1024, 256, 64, 16,  4, 1]])
vb = 1.0 *np.matrix("1594323;8192;1594323;1220703125;
                     13060694016;96889010407; 8192;1594323;
					 1220703125;1;1594323;8192;67108864")

#Vandermonde for n=8
vrb = 1.0 *np.matrix("1594323;8192;1594323;1220703125;13060694016;96889010407;8192;1594323")
vander=1.0*np.matrix([[       1,       1,       1,       1,       1,       1,       1,         1],
 [       128,       64,       32,       16,        8,        4,        2,     1],
 [       2187,      729,      243,       81,       27,        9,        3,     1],
 [      78125,    15625,     3125,      625,      125,       25,        5,     1],
 [    279936,    46656,     7776,     1296,      216,       36,        6,     1],
 [    823543,   117649,    16807,     2401,      343,       49,        7,     1],
 [   2097152,   262144,    32768,     4096,      512,       64,        8,     1],
 [       2187,      729,      243,       81,       27,        9,        3,     1]])

print naiveGauss(m1,b1)
print naiveGauss(m2,b2)
print 'Vandermonde matrix for n=8'
print naiveGauss(vander,vrb)
print 'Vandermonde matrix for n=14'
print naiveGauss(vandermonde,vb)
